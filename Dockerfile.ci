# Dockerfile.ci - Exact replica of GitHub Actions Ubuntu environment
FROM ubuntu:22.04

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies matching GitHub Actions runner
RUN apt-get update && apt-get install -y \
    software-properties-common \
    curl \
    wget \
    git \
    build-essential \
    libssl-dev \
    libffi-dev \
    python3-dev \
    python3-pip \
    python3-venv \
    && rm -rf /var/lib/apt/lists/*

# Install Python 3.11 (matching CI)
RUN add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y python3.11 python3.11-dev python3.11-venv python3.11-distutils && \
    rm -rf /var/lib/apt/lists/*

# Set Python 3.11 as default
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1 && \
    update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1

# Install pip for Python 3.11
RUN curl https://bootstrap.pypa.io/get-pip.py | python3.11

# Set working directory
WORKDIR /workspace

# Copy requirements first for better Docker layer caching
COPY requirements.txt requirements-dev.txt pyproject.toml ./

# Install dependencies exactly like CI workflow
RUN python -m pip install --upgrade pip && \
    pip install -r requirements.txt && \
    pip install ruff bandit mypy pylint pytest pytest-cov types-PyYAML fastapi fastembed

# Set environment variables matching CI
ENV PYTHONPATH=/workspace/src
ENV QDRANT_STORAGE_PATH=/workspace/temp_data/qdrant
ENV KUZU_DB_PATH=/workspace/temp_data/kuzu/ci_test.db

# Create temp directories
RUN mkdir -p /workspace/temp_data/qdrant /workspace/temp_data/kuzu

# Copy source code
COPY . .

# Install package in development mode
RUN pip install -e ".[dev]"

# Default command runs the full CI pipeline
CMD ["bash", "-c", "echo 'üê≥ Starting local CI pipeline...' && \
     echo '1Ô∏è‚É£ Security scan...' && \
     bandit -r src/ -f json -o bandit-report.json && \
     echo '2Ô∏è‚É£ Code formatting...' && \
     ruff format --check src/ && \
     echo '3Ô∏è‚É£ Code linting...' && \
     ruff check src/ && \
     echo '4Ô∏è‚É£ Type checking...' && \
     mypy src/ --ignore-missing-imports && \
     echo '5Ô∏è‚É£ Running tests...' && \
     python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing && \
     echo '‚úÖ Local CI pipeline completed successfully!'"]
