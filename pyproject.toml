[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "memg-core"
# NOTE: Bump this when publishing a new version; CI uses skip-existing to avoid failures
version = "1.0.0"
description = "Core memory system library with dual storage (Qdrant + Kuzu) and AI integration"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
 {name = "Genovo AI", email = "dev@genovo.ai"},
]
classifiers = [
 "Development Status :: 4 - Beta",
 "Intended Audience :: Developers",
 "License :: OSI Approved :: MIT License",
 "Programming Language :: Python :: 3",
 "Programming Language :: Python :: 3.10",
 "Programming Language :: Python :: 3.11",
 "Programming Language :: Python :: 3.12",
]
dependencies = [
 # Core memory system dependencies (no MCP server)
 "qdrant-client>=1.14.0",
 "kuzu==0.11.1",
 "pydantic>=2.11.7,<3.0.0",
 "pydantic-core>=2.33.0,<3.0.0",
 "python-dotenv>=1.0.1",
 "google-genai>=1.0.0", # Modern Google GenAI SDK
 "typing-extensions>=4.12.0",
 "httpx>=0.28.0",
]

[project.optional-dependencies]
dev = [
 "pre-commit>=4.2.0",
 "black>=25.1.0",
 "isort>=6.0.1",
 "pylint>=3.3.7",
 "pytest>=8.4.1",
 "pytest-asyncio>=0.25.0",
 "pytest-cov>=6.0.0",
 "mypy>=1.17.0",
 "bandit>=1.8.6",
  "ruff>=0.4.0",
]

[project.urls]
Homepage = "https://github.com/genovo-ai/memg-core"
Repository = "https://github.com/genovo-ai/memg-core"
Issues = "https://github.com/genovo-ai/memg-core/issues"

# PYLINT CONFIGURATION - PREVENT GOOGLE-GENAI CONFUSION
[tool.pylint.main]
# Add all required packages to recognized imports
extension-pkg-allow-list = [
    "google.genai", 
    "google",
    "kuzu",
    "qdrant_client",
    "pydantic",
    "dotenv"
]
ignored-modules = ["google.generativeai"] # Ignore the deprecated package

# Only lint the src directory, not integration (has separate config)
source-roots = ["src"]
ignore-paths = ["integration/.*"]

# Add source paths to help pylint find modules
init-hook = '''
import sys
import os
# Add src to path for core memory system
sys.path.insert(0, os.path.join(os.getcwd(), "src"))
# Add integration to path for MCP modules
sys.path.insert(0, os.path.join(os.getcwd(), "integration"))
# Add root to path for proper imports
sys.path.insert(0, os.getcwd())
'''

[tool.pylint.messages_control]
# Enable import checking but with proper configuration
disable = [
 "too-many-arguments",
 "too-many-instance-attributes", 
 "too-few-public-methods",
 "duplicate-code",
 "too-many-locals",
 "too-many-branches",
 "too-many-statements",
 "too-many-positional-arguments",
 "import-outside-toplevel",
 "broad-exception-caught",
 "logging-fstring-interpolation",
 "raise-missing-from",
 "no-self-argument",  # Pydantic validators use cls, not self
 "missing-function-docstring",  # Many small utility functions don't need docstrings
 "missing-module-docstring",  # Module docstrings are not always necessary
 "no-else-return",  # Sometimes else after return is more readable
 "no-member",  # Pydantic models have dynamic attributes
 "unused-argument",  # Some arguments are required by interface but not used
 "fixme",  # TODO comments are acceptable
 "protected-access",  # Sometimes accessing protected members is necessary
 "unused-import",  # Some imports are used dynamically
 "reimported",  # Re-importing for convenience is acceptable
 "global-statement",  # Global variables are sometimes necessary
 "global-variable-not-assigned",  # Global declarations without assignment are valid
 "unnecessary-pass",  # Pass statements in abstract methods are acceptable
 "too-many-return-statements",  # Complex logic sometimes requires many returns
 "too-many-nested-blocks",  # Complex processing sometimes requires nesting
 "consider-using-set-comprehension",  # List comprehensions are sometimes more readable
 "unrecognized-option",  # Ignore unknown pylint options
]

# Set high score requirement for production
fail-under = 9.5

[tool.pylint.imports]
# Declare all third-party packages
known-third-party = [
    "google", 
    "google.genai",
    "kuzu",
    "qdrant_client", 
    "pydantic",
    "dotenv",
    "httpx",
    "typing_extensions",
    "fastmcp",
    "uvicorn",
    "starlette"
]

# Ignore import errors from files that don't exist in src/memory_system
# (MCP files are now in integration/)
ignored-classes = ["mcp_server", "mcp_server_core", "mcp_tools_core"]

# MYPY CONFIGURATION
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true # Ignore missing stubs for google-genai

# BLACK CONFIGURATION
[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
 # directories
 \.eggs
 | \.git
 | \.hg
 | \.mypy_cache
 | \.tox
 | \.venv
 | build
 | dist
)/
'''

# ISORT CONFIGURATION
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_third_party = ["google", "google.genai", "qdrant_client", "kuzu", "fastmcp"]

# PYTEST CONFIGURATION
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=src --cov-report=term-missing"

# BANDIT SECURITY CONFIGURATION
[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]
